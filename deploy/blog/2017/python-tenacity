<!DOCTYPE html>
<html lang="en">
  <head>
        <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Python never gives up: the tenacity library | Julien Danjou</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="Jason W. Sidabras">

    <link href="/media/css/bootstrap.min.css" rel="stylesheet">
    <link href="/media/css/style.css" rel="stylesheet">


    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
    <script>window.jQuery || document.write('<script src="../../assets/js/vendor/jquery.min.js"><\/script>')</script>
    <script src="/media/js/libs/bootstrap.min.js"></script>
 
   <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
        <!-- fonts -->
    <link href='http://fonts.googleapis.com/css?family=Nunito:300,400,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Raleway:400,300,500,600,700' rel='stylesheet' type='text/css'>
    <link href='/media/css/font-awesome.min.css' rel="stylesheet" type="text/css">
    <link href='/media/css/academicons.min.css' rel="stylesheet" type="text/css">
    <!-- nfonts -->
        
    <script type="text/javascript">
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-25393581-1', 'auto', {'allowLinker': true});
        ga('send', 'pageview');
    </script>


        <link rel="shortcut icon" href="/favicon.ico">
    <link rel="icon" type="image/png" href="/favicon.png" sizes="32x32">
    
        
      </head>

  <body class="python-tenacity">
        <!-- start main wrapper -->
        <div id="header"><!-- start main header -->
            <div class="top-line">&nbsp;</div>
                <div class="top"><!-- top -->
                    <div class="container">
                        <div class="media-top-right">
                            <ul class="media-top clearfix">
                                <li class="item"><a href="https://www.linkedin.com/in/jason-sidabras-596466b6" target="blank"    ><i class="fa fa-linkedin-square ai-2x"></i></a></li>
                                <li class="item"><a href="https://scholar.google.com/citations?user=pbXGcaoAAAAJ" target="blank"><i class="ai ai-google-scholar ai-2x"></i></a></li>
                            </ul>
                            <div class="clearfix"></div>
                        </div>
                    </div>
                </div><!-- top -->
                <div class="container"><!-- container -->
                    <div class="row">
                        <div class="col-md-5"><!-- logo -->
                            <a href="index.html" title="Job Board" rel="home">
                                <img class="main-logo" style="margin-left: 20px; width: 75%;" src="/media/img/ActEPRLogo.png" alt="Act-EPR" />
                            </a>
                            <br />
                            <br />
                        </div><!-- logo -->
                    </div>
                    <div class="row">
                        <div class="col-md-8  main-nav"><!-- Main Navigation -->
                            <a id="touch-menu" class="mobile-menu" href="#"><i class="fa fa-bars fa-2x"></i></a>
                            <nav>
                                <ul class="menu">
                                    <li><a href="/">HOME</a></li>
                                    <li><a  href="#">WORK PACKAGES</a>
                                        <ul class="sub-menu">
                                            <li><a href="#">WP1 Micro-Helix Resonators</a></li>
                                            <li><a href="#">WP2 Technology Advancements</a></li>
                                            <li><a href="#">WP3 Biological Research</a></li>
                                        </ul>
                                    </li>
                                    <li><a  href="/publications.html">PUBLICATIONS</a></li>
                                    <li><a  href="/blog/">BLOG</a></li>
                                    <li><a  href="#">ABOUT</a></li>
                                </ul>
                            </nav>
                        </div><!-- Main Navigation -->
                        <div class="clearfix"></div>
                    </div>
                </div><!-- container -->
            </div><!-- end main header -->
            <br />
            <div class="container"><!-- Container -->
                <div class="row">
                    <div class="container" id="top">
        <div class="col-md-8 col-md-offset-1">
    <header>
    <h1>Python never gives up: the tenacity library</h1>
      <div class="meta">
        <small><i class="fa fa-calendar"></i>Thursday 02 March 2017</small>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <small>
          <i class="fa fa-folder"></i>
                      <a href="/blog/tags/Python.html">Python</a>                  </small>
      </div>
      <hr style="margin-bottom: 2em;" />
    </header>
            <p>A couple of years ago,
I
<a href="https://julien.danjou.info/blog/2015/python-retrying">wrote about the Python <em>retrying</em> library</a>.
This library was designed to retry the execution of a task when a failure
occurred.</p>
<p>I started to spread usage of this library in various projects, such
as <a href="http://gnocchi.xyz">Gnocchi</a>, these last years. Unfortunately, it started
to get very hard to contribute and send patches to the upstream <em>retrying</em>
project. I spent several months trying to work with the original author. But
after a while, I had to come to the conclusion that I would be unable to fix
bugs and enhance it at the pace I would like to. Therefore, I had to take a
difficult decision and decided to fork the library.</p>
<h1>Here comes <em>tenacity</em></h1>
<p>I picked a new name and rewrote parts of the API of <em>retrying</em> that were not
working correctly or were too complicated. I also fixed bugs with the help of
Joshua, and named this new library <em>tenacity</em>. It works in the same manner as
<em>retrying</em> does, except that it is written in a more functional way and offers
some nifty new features.</p>
<h1>Basic usage</h1>
<p>The basic usage is to use it as a decorator:</p>
<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tenacity</span><br />&nbsp;<br /><span class="nd">@tenacity.retry</span><br /><span class="k">def</span> <span class="nf">do_something_and_retry_on_any_exception</span><span class="p">():</span><br />    <span class="k">pass</span><br /></pre></div>

<p><br />
This will make the function <code>do_something_and_retry_on_any_exception</code> be called
over and over again until it stops raising an exception. It would have been
hard to design anything simpler. Obviously, this is a pretty rare case, as one
usually wants to e.g. wait some time between retries. For that, <em>tenacity</em>
offers a large panel of waiting methods:</p>
<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tenacity</span><br />&nbsp;<br /><span class="nd">@tenacity.retry</span><span class="p">(</span><span class="n">wait</span><span class="o">=</span><span class="n">tenacity</span><span class="o">.</span><span class="n">wait_fixed</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span><br /><span class="k">def</span> <span class="nf">do_something_and_retry</span><span class="p">():</span><br />    <span class="n">do_something</span><span class="p">()</span><br /></pre></div>

<p><br />
Or a simple exponential back-off method can be used instead:</p>
<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tenacity</span><br />&nbsp;<br /><span class="nd">@tenacity.retry</span><span class="p">(</span><span class="n">wait</span><span class="o">=</span><span class="n">tenacity</span><span class="o">.</span><span class="n">wait_exponential</span><span class="p">())</span><br /><span class="k">def</span> <span class="nf">do_something_and_retry</span><span class="p">():</span><br />    <span class="n">do_something</span><span class="p">()</span><br /></pre></div>

<p><br /></p>
<h1>Combination</h1>
<p>What is especially interesting with <em>tenacity</em>, is that you can easily combine
several methods. For example, you can combine <code>tenacity.wait.wait_random</code> with
<code>tenacity.wait.wait_fixed</code> to wait a number of seconds defined in an interval:</p>
<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tenacity</span><br />&nbsp;<br /><span class="nd">@tenacity.retry</span><span class="p">(</span><span class="n">wait</span><span class="o">=</span><span class="n">tenacity</span><span class="o">.</span><span class="n">wait_fixed</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">+</span> <span class="n">wait</span><span class="o">.</span><span class="n">wait_random</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span><br /><span class="k">def</span> <span class="nf">do_something_and_retry</span><span class="p">():</span><br />    <span class="n">do_something</span><span class="p">()</span><br /></pre></div>

<p><br />
This will make the function being retried wait randomly between 10 and 13
seconds before trying again.</p>
<p><em>tenacity</em> offers more customization, such as retrying on some exceptions only.
You can retry every second to execute the function only if the exception raised
by <code>do_something</code> is an instance of <code>IOError</code>, e.g. a network communication
error.</p>
<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tenacity</span><br />&nbsp;<br /><span class="nd">@tenacity.retry</span><span class="p">(</span><span class="n">wait</span><span class="o">=</span><span class="n">tenacity</span><span class="o">.</span><span class="n">wait_fixed</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><br />                <span class="n">retry</span><span class="o">=</span><span class="n">tenacity</span><span class="o">.</span><span class="n">retry_if_exception_type</span><span class="p">(</span><span class="ne">IOError</span><span class="p">))</span><br /><span class="k">def</span> <span class="nf">do_something_and_retry</span><span class="p">():</span><br />    <span class="n">do_something</span><span class="p">()</span><br /></pre></div>

<p><br />
You can combine several condition easily by using the <code>|</code> or <code>&amp;</code> binary
operators. They are used to make the code retry if an <code>IOError</code> exception is
raised, or if no result is returned. Also, a stop condition is added with the
<code>stop</code> keyword arguments. It allows to specify a condition unrelated to the
function result of exception to stop, such as a number of attemps or a delay.</p>
<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tenacity</span><br />&nbsp;<br /><span class="nd">@tenacity.retry</span><span class="p">(</span><span class="n">wait</span><span class="o">=</span><span class="n">tenacity</span><span class="o">.</span><span class="n">wait_fixed</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><br />                <span class="n">stop</span><span class="o">=</span><span class="n">tenacity</span><span class="o">.</span><span class="n">stop_after_delay</span><span class="p">(</span><span class="mi">60</span><span class="p">),</span><br />                <span class="n">retry</span><span class="o">=</span><span class="p">(</span><span class="n">tenacity</span><span class="o">.</span><span class="n">retry_if_exception_type</span><span class="p">(</span><span class="ne">IOError</span><span class="p">)</span> <span class="o">|</span><br />                       <span class="n">tenacity</span><span class="o">.</span><span class="n">retry_if_result</span><span class="p">(</span><span class="k">lambda</span> <span class="n">result</span><span class="p">:</span> <span class="n">result</span> <span class="o">==</span> <span class="bp">None</span><span class="p">))</span><br /><span class="k">def</span> <span class="nf">do_something_and_retry</span><span class="p">():</span><br />    <span class="n">do_something</span><span class="p">()</span><br /></pre></div>

<p><br />
The functional approach of <em>tenacity</em> makes it easy and clean to combine a lot
of condition for various use cases with simple binary operators.</p>
<h1>Standalone usage</h1>
<p><em>tenacity</em> can also be used without decorator by using the object <code>Retrying</code>,
that implements its main behaviour, and usig its <code>call</code> method. This allows to
call any function with different retry conditions, or to retry any piece of
code that do not use the decorator at all – like code from an external library.</p>
<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tenacity</span><br />&nbsp;<br /><span class="n">r</span> <span class="o">=</span> <span class="n">tenacity</span><span class="o">.</span><span class="n">Retrying</span><span class="p">(</span><br />    <span class="n">wait</span><span class="o">=</span><span class="n">tenacity</span><span class="o">.</span><span class="n">wait_fixed</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><br />    <span class="n">retry</span><span class="o">=</span><span class="n">tenacity</span><span class="o">.</span><span class="n">retry_if_exception_type</span><span class="p">(</span><span class="ne">IOError</span><span class="p">))</span><br /><span class="n">r</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">do_something</span><span class="p">)</span><br /></pre></div>

<p><br />
This also allows you to re-use that object without creating one new each time,
saving some memory!</p>
<p>I hope you'll like it and will find it some use. Feel free to fork it, report
bug or ask for new features on <a href="https://github.com/jd/tenacity">its GitHub</a>!</p>          </div>

  </div>
            
                </div> <!-- /row-->
            </div> <!-- /container -->
        </div>
    
    <div id="footer"><!-- Footer -->
        <div class="container"><!-- Container -->
            <div class="row">
                <div style="margin-left: 60px;" class="col-md-5 footer-widget"><!-- Text Widget -->
                    <h6 class="widget-title">Acknowledgements</h6>
                        <div class="textwidget">
                            <a href="http://ec.europa.eu/research/participants/portal/desktop/en/home.html">
                              <img src="/media/img/logo_EUh2020_horizontal.png" />
                            </a>
                            <br /><br />
                            <a href="https://cec.mpg.de/home/">
                              <img src="/media/img/csm_mpi-logo.png" />
                            </a>
                        </div>

                </div><!-- Text Widget -->

                <div style="margin-right:20px;" class="col-md-3 footer-widget"><!-- Recent Tweet Widget -->
                    <h6 class="widget-title">Links of Interest</h6>
                    <div class="recent-twitt">
                    <p class="textwidget" style="text-align: justify;">
                        <a style="color: #f0ce42;" href="https://cec.mpg.de/biophysikalische-chemie/dr-edward-j-reijerse/">Bio Hydrogen Group</a> - Led by Dr. Edward J. Reijerse, the Bio Hydrogen Group looks to understand the chemical reaction of biological hydrogenase in order to create bio-inspired molecular catalysts. 
                    </p>
                </div>
            </div><!-- Recent Tweet Widget -->

            <div class="col-md-3 footer-widget"><!-- News Leter Widget -->
                <h6 class="widget-title">News</h6>
                <div class="textwidget">
                    <p>Act-EPR project starts on 1st May, 2017.</p>
                </div>
            </div><!-- News Leter Widget -->
            <div class="clearfix"></div>
        </div>

        <div class="footer-credits"><!-- Footer credits -->
            2017 &copy; Jason W. Sidabras
        </div><!-- Footer credits -->
    </div><!-- Container -->
</div><!-- Footer -->

</div><!-- end main wrapper -->
 </body>
</html>